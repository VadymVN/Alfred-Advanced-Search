#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import re
from pathlib import Path
from typing import List, Dict, Optional, Union
from functools import lru_cache

class FileSystemHelper:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏."""
    
    def __init__(self, use_spotlight: bool = True):
        self.use_spotlight = use_spotlight
        self._setup_spotlight() if use_spotlight else None
    
    def _setup_spotlight(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Spotlight –∏ –µ–≥–æ –∏–Ω–¥–µ–∫—Å–∞."""
        try:
            os.system('mdutil -s / > /dev/null 2>&1')
            self.spotlight_available = True
        except:
            self.spotlight_available = False

    @lru_cache(maxsize=100)
    def get_file_metadata(self, file_path: Path) -> Dict[str, str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞, –∫—ç—à–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
        metadata = {
            "name": file_path.name,
            "path": str(file_path),
            "type": "file" if file_path.is_file() else "directory",
            "parent": str(file_path.parent),
            "icon": "üìÑ" if file_path.is_file() else "üìÇ"
        }
        
        if self.use_spotlight and self.spotlight_available and file_path.is_file():
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ Spotlight –¥–ª—è —Ñ–∞–π–ª–æ–≤
            try:
                import subprocess
                cmd = ['mdls', '-name', 'kMDItemDisplayName', '-name', 'kMDItemKind', str(file_path)]
                result = subprocess.run(cmd, capture_output=True, text=True)
                if result.returncode == 0:
                    metadata.update(self._parse_spotlight_metadata(result.stdout))
            except:
                pass
                
        return metadata

    def _parse_spotlight_metadata(self, metadata_str: str) -> Dict[str, str]:
        """–ü–∞—Ä—Å–∏—Ç –≤—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã mdls."""
        metadata = {}
        for line in metadata_str.splitlines():
            if '=' not in line:
                continue
            key, value = line.split('=', 1)
            key = key.strip()
            value = value.strip(' "')
            if key and value != '(null)':
                metadata[key] = value
        return metadata

class SearchHelper:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤."""
    
    def __init__(self, fs_helper: FileSystemHelper):
        self.fs_helper = fs_helper
        
    def fuzzy_match(self, query: str, text: str) -> bool:
        """–†–µ–∞–ª–∏–∑—É–µ—Ç –Ω–µ—á–µ—Ç–∫–∏–π –ø–æ–∏—Å–∫."""
        query = query.lower()
        text = text.lower()
        
        # –ü—Ä–æ—Å—Ç–æ–π —Å–ª—É—á–∞–π - –ø—Ä—è–º–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ
        if query in text:
            return True
            
        # –ù–µ—á–µ—Ç–∫–∏–π –ø–æ–∏—Å–∫ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
        query_chars = list(query)
        text_pos = 0
        
        for char in query_chars:
            text_pos = text.find(char, text_pos)
            if text_pos == -1:
                return False
            text_pos += 1
            
        return True

    def filter_by_pattern(self, items: List[Path], pattern: str) -> List[Path]:
        """–§–∏–ª—å—Ç—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É."""
        try:
            regex = re.compile(pattern, re.IGNORECASE)
            return [item for item in items if regex.search(item.name)]
        except re.error:
            # –ï—Å–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ–º,
            # –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏
            return [item for item in items if pattern.lower() in item.name.lower()]

class WorkflowHelper:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Alfred Workflow."""
    
    @staticmethod
    def format_item(
        title: str,
        subtitle: str,
        arg: str,
        valid: bool = True,
        item_type: str = "default",
        icon: Optional[str] = None,
        text: Optional[Dict[str, str]] = None
    ) -> Dict[str, Union[str, bool, Dict]]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ Alfred."""
        item = {
            "title": title,
            "subtitle": subtitle,
            "arg": arg,
            "valid": valid,
            "type": item_type
        }
        
        if icon:
            item["icon"] = {"path": icon}
        if text:
            item["text"] = text
            
        return item

    @staticmethod
    def get_scope() -> Path:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –æ–±–ª–∞—Å—Ç—å –ø–æ–∏—Å–∫–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Alfred."""
        scope_str = os.getenv('scope', os.path.expanduser('~'))
        return Path(scope_str)

    @staticmethod
    def set_scope(path: Path) -> None:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤—É—é –æ–±–ª–∞—Å—Ç—å –ø–æ–∏—Å–∫–∞."""
        os.environ['scope'] = str(path)

    @staticmethod
    def get_search_depth() -> float:
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –≥–ª—É–±–∏–Ω—É –ø–æ–∏—Å–∫–∞."""
        try:
            return float(os.getenv('SEARCH_DEPTH', 'inf'))
        except ValueError:
            return float('inf')