#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import json
import sys
import pytest
from pathlib import Path
from search import (
    should_exclude,
    create_item,
    list_directory,
    search_files,
    handle_cd_up,
    EXCLUDED_PATTERNS,
)

# –§–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤
@pytest.fixture
def temp_directory(tmp_path):
    """–°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏."""
    # –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Ñ–∞–π–ª—ã
    (tmp_path / "test1.txt").touch()
    (tmp_path / "test2.py").touch()
    
    # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä—ã—Ç—ã–π —Ñ–∞–π–ª
    (tmp_path / ".hidden").touch()
    
    # –°–æ–∑–¥–∞–µ–º .app —Ñ–∞–π–ª
    app_dir = tmp_path / "TestApp.app"
    app_dir.mkdir()
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å —Ñ–∞–π–ª–∞–º–∏
    subdir = tmp_path / "subdir"
    subdir.mkdir()
    (subdir / "subfile.txt").touch()
    
    return tmp_path

# –¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ should_exclude
def test_should_exclude_hidden_files():
    """–¢–µ—Å—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è —Å–∫—Ä—ã—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤."""
    assert should_exclude(".hidden") == True
    assert should_exclude("normal.txt") == False

def test_should_exclude_app_bundles():
    """–¢–µ—Å—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è .app –±–∞–Ω–¥–ª–æ–≤."""
    assert should_exclude("TestApp.app") == True
    assert should_exclude("test.txt") == False

def test_should_exclude_patterns():
    """–¢–µ—Å—Ç –≤—Å–µ—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è."""
    assert should_exclude(".test") == True  # –°–∫—Ä—ã—Ç—ã–π —Ñ–∞–π–ª
    assert should_exclude("test.app") == True  # App –±–∞–Ω–¥–ª
    assert should_exclude("test.txt") == False  # –û–±—ã—á–Ω—ã–π —Ñ–∞–π–ª

# –¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ create_item
def test_create_item_file():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è —Ñ–∞–π–ª–∞."""
    path = Path("/test/file.txt")
    item = create_item(path, is_file=True)
    
    assert item["title"] == "file.txt"
    assert item["subtitle"].startswith("üìÑ")
    assert item["arg"] == str(path)
    assert item["type"] == "file"
    assert item["valid"] == True

def test_create_item_directory():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."""
    path = Path("/test/dir")
    item = create_item(path, is_file=False)
    
    assert item["title"] == "dir"
    assert item["subtitle"].startswith("üìÇ")
    assert item["arg"] == str(path)
    assert item["type"] == "default"
    assert item["valid"] == True

def test_create_item_root():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."""
    path = Path("/")
    item = create_item(path, is_file=False)
    
    assert item["title"] == "/"
    assert item["subtitle"].startswith("üìÇ")
    assert item["arg"] == "/"

# –¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ list_directory
def test_list_directory_contents(temp_directory):
    """–¢–µ—Å—Ç –ª–∏—Å—Ç–∏–Ω–≥–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."""
    items = list_directory(temp_directory)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤ (–∏—Å–∫–ª—é—á–∞—è .hidden –∏ .app)
    assert len(items) == 3  # test1.txt, test2.py, subdir

def test_list_directory_permission_error(tmp_path):
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."""
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –±–µ–∑ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    no_access_dir = tmp_path / "no_access"
    no_access_dir.mkdir()
    os.chmod(no_access_dir, 0o000)
    
    items = list_directory(no_access_dir)
    assert len(items) == 1
    assert items[0]["title"] == "Permission denied"
    assert items[0]["valid"] == False
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
    os.chmod(no_access_dir, 0o755)

# –¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ search_files
def test_search_files_basic(temp_directory):
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤."""
    results = search_files("test", temp_directory)
    assert len(results) == 2  # test1.txt –∏ test2.py

def test_search_files_case_insensitive(temp_directory):
    """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞."""
    results = search_files("TEST", temp_directory)
    assert len(results) == 2  # –¥–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ test1.txt –∏ test2.py

def test_search_files_with_depth(temp_directory):
    """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –≥–ª—É–±–∏–Ω—ã."""
    results = search_files("subfile", temp_directory, depth=1)
    assert len(results) == 1  # –¥–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ subfile.txt –≤ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏

def test_search_files_empty_query(temp_directory):
    """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Å –ø—É—Å—Ç—ã–º –∑–∞–ø—Ä–æ—Å–æ–º."""
    results = search_files("", temp_directory)
    assert len(results) == 0

# –¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ handle_cd_up
def test_handle_cd_up_normal():
    """–¢–µ—Å—Ç –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ."""
    current = Path("/test/directory")
    results = handle_cd_up(current)
    
    assert len(results) == 1
    assert results[0]["title"] == "test"
    assert results[0]["arg"] == "/test"

def test_handle_cd_up_root():
    """–¢–µ—Å—Ç –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤—ã—à–µ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."""
    current = Path("/")
    results = handle_cd_up(current)
    
    assert len(results) == 1
    assert results[0]["title"] == "/"
    assert results[0]["arg"] == "/"

# –¢–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Alfred
def test_alfred_json_output(temp_directory, capsys):
    """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∞ –≤—ã–≤–æ–¥–∞ JSON –¥–ª—è Alfred."""
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    os.environ['scope'] = str(temp_directory)
    sys.argv = ['search.py', 'test']
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º main()
    from search import main
    main()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–≤–æ–¥
    captured = capsys.readouterr()
    output = json.loads(captured.out)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É JSON
    assert "items" in output
    assert isinstance(output["items"], list)
    for item in output["items"]:
        assert "title" in item
        assert "subtitle" in item
        assert "arg" in item
        assert "valid" in item
        assert "type" in item