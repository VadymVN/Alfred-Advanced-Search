#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import json
import os
import sys
from pathlib import Path
from typing import List, Dict, Union

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
SEARCH_DEPTH = float('inf')  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ –ø–æ–∏—Å–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
EXCLUDED_PATTERNS = ['.', '.app']  # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤

def should_exclude(name: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–∫–ª—é—á–∏—Ç—å —Ñ–∞–π–ª/–ø–∞–ø–∫—É –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."""
    return name.startswith('.') or name.endswith('.app')

def create_item(path: Path, is_file: bool = True) -> Dict[str, str]:
    """–°–æ–∑–¥–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ Alfred."""
    return {
        "title": path.name or str(path),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º str(path) –¥–ª—è –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        "subtitle": f"üìÑ {path.parent}" if is_file else f"üìÇ {path.parent}",
        "arg": str(path),
        "type": "file" if is_file else "default",
        "valid": True
    }

def list_directory(scope: Path) -> List[Dict[str, str]]:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."""
    items = []
    try:
        for item in scope.iterdir():
            if should_exclude(item.name):
                continue
            items.append(create_item(item, item.is_file()))
    except PermissionError:
        items.append({
            "title": "Permission denied",
            "subtitle": f"Cannot access {scope}",
            "valid": False
        })
    return items

def search_files(query: str, scope: Path, depth: float = SEARCH_DEPTH) -> List[Dict[str, str]]:
    """–ò—â–µ—Ç —Ñ–∞–π–ª—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É —Å —É—á–µ—Ç–æ–º –≥–ª—É–±–∏–Ω—ã –ø–æ–∏—Å–∫–∞."""
    if not query:  # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—É—Å—Ç–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        return []
        
    items = []
    current_depth = 0
    
    def walk(current_path: Path, current_depth: int):
        if current_depth > depth:
            return
            
        try:
            for item in current_path.iterdir():
                if should_exclude(item.name):
                    continue
                    
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞–ø—Ä–æ—Å—É (–Ω–µ—á–µ—Ç–∫–∏–π –ø–æ–∏—Å–∫)
                if query.lower() in item.name.lower():
                    items.append(create_item(item, item.is_file()))
                    
                # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ö–æ–¥–∏–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                if item.is_dir():
                    walk(item, current_depth + 1)
        except PermissionError:
            pass  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞
            
    walk(scope, current_depth)
    return items

def handle_cd_up(scope: Path) -> List[Dict[str, str]]:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É cd.. –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ."""
    parent = scope.parent
    return [{
        "title": parent.name or "/",
        "subtitle": "‚¨ÜÔ∏è Parent directory",
        "arg": str(parent),
        "valid": True,
        "type": "default"
    }]

def main():
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å –æ—Ç Alfred
    query = sys.argv[1] if len(sys.argv) > 1 else ""
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –æ–±–ª–∞—Å—Ç—å –ø–æ–∏—Å–∫–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Alfred
    scope_str = os.getenv('scope', os.path.expanduser('~'))  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –¥–æ–º–∞—à–Ω—è—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
    scope = Path(scope_str)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    items = []
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    if query == "ls":
        items = list_directory(scope)
    elif query == "cd..":
        items = handle_cd_up(scope)
    else:
        # –û–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤
        items = search_files(query, scope)
    
    # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not items:
        items = [{
            "title": "No matches found",
            "subtitle": f"No items matching '{query}' in {scope}",
            "arg": str(scope),  # –î–æ–±–∞–≤–ª—è–µ–º arg –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            "valid": False
        }]
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –¥–ª—è Alfred
    print(json.dumps({"items": items}))

if __name__ == "__main__":
    main()