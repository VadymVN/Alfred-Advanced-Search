#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import json
import os
import sys
from pathlib import Path
from typing import List, Dict, Union, Literal

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
SEARCH_DEPTH = 3  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ –ø–æ–∏—Å–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
MAX_RESULTS = 50  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
EXCLUDED_PATTERNS = ['.', '.app']  # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
DIR_FLAG = "1"  # –§–ª–∞–≥ –¥–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
FILE_FLAG = "0"  # –§–ª–∞–≥ –¥–ª—è —Ñ–∞–π–ª–æ–≤
COMMON_SEARCH_PATHS = [
    '~/Documents',
    '~/Downloads',
    '~/Desktop',
    '~/Projects',
    '~/Applications'
]  # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞

def should_exclude(name: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–∫–ª—é—á–∏—Ç—å —Ñ–∞–π–ª/–ø–∞–ø–∫—É –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."""
    return name.startswith('.') or name.endswith('.app')

def create_item(path: Path, is_file: bool = True) -> Dict[str, str]:
    """
    –°–æ–∑–¥–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ Alfred.
    
    Args:
        path (Path): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        is_file (bool): –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—É—Ç—å —Ñ–∞–π–ª–æ–º (True) –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π (False)
    
    Returns:
        Dict[str, str]: –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –¥–ª—è Alfred, –≤–∫–ª—é—á–∞—è:
            - title: –ò–º—è —Ñ–∞–π–ª–∞/–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            - subtitle: –ü—É—Ç—å –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –∏–∫–æ–Ω–∫–æ–π
            - arg: –ü–æ–ª–Ω—ã–π –ø—É—Ç—å
            - type: –¢–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞ ('file' –∏–ª–∏ 'default')
            - valid: –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç–∞
            - variables: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (is_dir, scope –¥–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π)
    """
    variables = {
        "is_dir": FILE_FLAG if is_file else DIR_FLAG
    }
    
    item = {
        "title": path.name or str(path),
        "subtitle": f"üìÑ {path.parent}" if is_file else f"üìÇ {path.parent}",
        "arg": str(path),
        "type": "file" if is_file else "default",
        "valid": True,
        "variables": variables
    }

    if not is_file:
        item["variables"]["scope"] = str(path)
        item["autocomplete"] = str(path)
        item["keepalive"] = True
        
    return item

def list_directory(scope: Path) -> List[Dict[str, str]]:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."""
    items = []
    try:
        for item in scope.iterdir():
            if should_exclude(item.name):
                continue
            items.append(create_item(item, item.is_file()))
    except PermissionError:
        items.append({
            "title": "Permission denied",
            "subtitle": f"Cannot access {scope}",
            "valid": False
        })
    return items

def search_files(query: str, scope: Path, depth: float = SEARCH_DEPTH, max_depth: int = 5, max_results: int = 50) -> List[Dict[str, str]]:
    """–ò—â–µ—Ç —Ñ–∞–π–ª—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É —Å —É—á–µ—Ç–æ–º –≥–ª—É–±–∏–Ω—ã –ø–æ–∏—Å–∫–∞."""
    if not query:  # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—É—Å—Ç–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        return []
        
    items = []
    current_depth = 0
    visited = set()  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    
    def walk(current_path: Path, current_depth: int):
        if current_depth > depth or current_depth > max_depth or len(items) >= max_results:
            return
            
        try:
            real_path = current_path.resolve()
            if real_path in visited:
                return
            visited.add(real_path)
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, —Ç–∞–∫ –∫–∞–∫ –º—ã –∏—â–µ–º —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ –Ω–µ—ë
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            for item in current_path.iterdir():
                if should_exclude(item.name):
                    continue
                
                if query.lower() in item.name.lower():
                    items.append(create_item(item, item.is_file()))
                    if len(items) >= max_results:
                        return
                
                # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ö–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                if item.is_dir() and not item.is_symlink() and item.parent == scope:
                    walk(item, current_depth + 1)
                    if len(items) >= max_results:
                        return
                        
        except (PermissionError, OSError):
            pass
            
    walk(scope, current_depth)
    return items

def handle_cd_up(scope: Path) -> List[Dict[str, str]]:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É cd.. –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ."""
    parent = scope.parent
    item = create_item(parent, is_file=False)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
    item["subtitle"] = "‚¨ÜÔ∏è Parent directory"  # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º subtitle
    return [item]

def get_search_paths() -> List[Path]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞."""
    paths = []
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è Alfred
    scope_str = os.getenv('scope')
    if scope_str:
        paths.append(Path(scope_str))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    for path_str in COMMON_SEARCH_PATHS:
        path = Path(os.path.expanduser(path_str))
        if path.exists() and path.is_dir():
            paths.append(path)
    
    return paths if paths else [Path.home()]

def main():
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å –æ—Ç Alfred
        query = sys.argv[1] if len(sys.argv) > 1 else ""
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –æ–±–ª–∞—Å—Ç—å –ø–æ–∏—Å–∫–∞
        scope = Path(os.getenv('scope', os.path.expanduser('~')))
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        items = []
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        if query == "ls":
            items = list_directory(scope)
        elif query == "cd..":
            items = handle_cd_up(scope)
        else:
            # –û–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤
            search_paths = get_search_paths()
            for path in search_paths:
                if len(items) >= MAX_RESULTS:
                    break
                try:
                    path_items = search_files(query, path, max_results=MAX_RESULTS - len(items))
                    items.extend(path_items)
                except (PermissionError, OSError):
                    continue
        
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not items:
            items = [{
                "title": "No matches found",
                "subtitle": f"No items matching '{query}' in search paths",
                "arg": str(scope),  # –î–æ–±–∞–≤–ª—è–µ–º arg –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                "valid": False
            }]
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –¥–ª—è Alfred
        print(json.dumps({"items": items[:MAX_RESULTS]}))
        
    except KeyboardInterrupt:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞
        print(json.dumps({
            "items": [{
                "title": "Search interrupted",
                "subtitle": "The search was interrupted by user",
                "valid": False
            }]
        }))

if __name__ == "__main__":
    main()